scalar JSON
scalar Long

type Run @key(fields: "runId") {
    runId: ID!
    sessionId: String
    repository: String
    state: String
    parameters: JSON
    startTime: String
    completeTime: String
    success: Boolean
    exitStatus: Int
    errorReport: String
    duration: Long
    commandLine: String
    engineParameters: EngineParameters
    tasks(taskId: String, state: String, tag: String): [Task]
}

type EngineParameters {
    launchDir: String
    projectDir: String
    resume: String
    revision: String
    workDir: String
}

type Task {
    taskId: ID
    runId: String
    sessionId: String
    name: String
    process: String
    state: String
    tag: String
    container: String
    attempt: Int
    submitTime: String
    startTime: String
    completeTime: String
    exit: Int
    script: String
    workdir: String
    cpus: Int
    memory: Long
    duration: Long
    realtime: Long
    rss: Long
    peakRss: Long
    vmem: Long
    peakVmem: Long
    readBytes: Long
    writeBytes: Long
    run: Run
}

input RunsFilter {
    runId: String
    sessionId: String
    state: String
    repository: String
    analysisId: String
}

input TasksFilter {
    runId: String
    sessionId: String
    state: String
    tag: String
    workDir: String
}

input Page {
    size: Int!
    from: Int!
}

directive @fetch(from : String!) on FIELD_DEFINITION

type Analysis @key(fields: "analysisId") @extends {
    analysisId: ID! @external
    inputForRuns(filter: RunsFilter): [Run] @fetch(from: "inputForRuns")
}

type Workflow @key(fields: "runId") @extends {
    runId: ID! @external
    run: Run
}

extend type Query {
    runs(filter: RunsFilter, page: Page): [Run]
    tasks(filter: TasksFilter, page: Page): [Task]
}
